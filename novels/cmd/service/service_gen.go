// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package service

import (
	endpoint1 "github.com/go-kit/kit/endpoint"
	log "github.com/go-kit/kit/log"
	prometheus "github.com/go-kit/kit/metrics/prometheus"
	opentracing "github.com/go-kit/kit/tracing/opentracing"
	grpc "github.com/go-kit/kit/transport/grpc"
	endpoint "github.com/moecasts/microcasts/novels/pkg/endpoint"
	service "github.com/moecasts/microcasts/novels/pkg/service"
	group "github.com/oklog/oklog/pkg/group"
	opentracinggo "github.com/opentracing/opentracing-go"
)

func createService(endpoints endpoint.Endpoints) (g *group.Group) {
	g = &group.Group{}
	initGRPCHandler(endpoints, g)
	return g
}
func defaultGRPCOptions(logger log.Logger, tracer opentracinggo.Tracer) map[string][]grpc.ServerOption {
	options := map[string][]grpc.ServerOption{
		"Add":          {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "Add", logger))},
		"BatchAdd":     {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "BatchAdd", logger))},
		"BatchDestroy": {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "BatchDestroy", logger))},
		"BatchEdit":    {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "BatchEdit", logger))},
		"BatchRestore": {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "BatchRestore", logger))},
		"BatchTrash":   {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "BatchTrash", logger))},
		"Browse":       {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "Browse", logger))},
		"Destroy":      {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "Destroy", logger))},
		"Edit":         {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "Edit", logger))},
		"Read":         {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "Read", logger))},
		"Restore":      {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "Restore", logger))},
		"Trash":        {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "Trash", logger))},
	}
	return options
}
func addDefaultEndpointMiddleware(logger log.Logger, duration *prometheus.Summary, mw map[string][]endpoint1.Middleware) {
	mw["Browse"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "Browse")), endpoint.InstrumentingMiddleware(duration.With("method", "Browse"))}
	mw["Read"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "Read")), endpoint.InstrumentingMiddleware(duration.With("method", "Read"))}
	mw["Add"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "Add")), endpoint.InstrumentingMiddleware(duration.With("method", "Add"))}
	mw["Edit"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "Edit")), endpoint.InstrumentingMiddleware(duration.With("method", "Edit"))}
	mw["Trash"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "Trash")), endpoint.InstrumentingMiddleware(duration.With("method", "Trash"))}
	mw["Restore"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "Restore")), endpoint.InstrumentingMiddleware(duration.With("method", "Restore"))}
	mw["Destroy"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "Destroy")), endpoint.InstrumentingMiddleware(duration.With("method", "Destroy"))}
	mw["BatchAdd"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "BatchAdd")), endpoint.InstrumentingMiddleware(duration.With("method", "BatchAdd"))}
	mw["BatchEdit"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "BatchEdit")), endpoint.InstrumentingMiddleware(duration.With("method", "BatchEdit"))}
	mw["BatchTrash"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "BatchTrash")), endpoint.InstrumentingMiddleware(duration.With("method", "BatchTrash"))}
	mw["BatchRestore"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "BatchRestore")), endpoint.InstrumentingMiddleware(duration.With("method", "BatchRestore"))}
	mw["BatchDestroy"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "BatchDestroy")), endpoint.InstrumentingMiddleware(duration.With("method", "BatchDestroy"))}
}
func addDefaultServiceMiddleware(logger log.Logger, mw []service.Middleware) []service.Middleware {
	return append(mw, service.LoggingMiddleware(logger))
}
func addEndpointMiddlewareToAllMethods(mw map[string][]endpoint1.Middleware, m endpoint1.Middleware) {
	methods := []string{"Browse", "Read", "Add", "Edit", "Trash", "Restore", "Destroy", "BatchAdd", "BatchEdit", "BatchTrash", "BatchRestore", "BatchDestroy"}
	for _, v := range methods {
		mw[v] = append(mw[v], m)
	}
}
