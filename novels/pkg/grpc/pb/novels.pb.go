// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: novels.proto

package novels

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type State int32

const (
	State_UNKONWN   State = 0
	State_DRAFT     State = 1
	State_REVIEWING State = 2
	// schedule publish
	State_PENDING   State = 3
	State_PUBLISHED State = 4
	State_REJECTED  State = 5
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "UNKONWN",
		1: "DRAFT",
		2: "REVIEWING",
		3: "PENDING",
		4: "PUBLISHED",
		5: "REJECTED",
	}
	State_value = map[string]int32{
		"UNKONWN":   0,
		"DRAFT":     1,
		"REVIEWING": 2,
		"PENDING":   3,
		"PUBLISHED": 4,
		"REJECTED":  5,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_novels_proto_enumTypes[0].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_novels_proto_enumTypes[0]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_novels_proto_rawDescGZIP(), []int{0}
}

type Novel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid      string               `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name      string               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Slug      string               `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
	Author    string               `protobuf:"bytes,5,opt,name=author,proto3" json:"author,omitempty"`
	Summary   string               `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary,omitempty"`
	Cover     string               `protobuf:"bytes,7,opt,name=cover,proto3" json:"cover,omitempty"`
	Finished  bool                 `protobuf:"varint,8,opt,name=finished,proto3" json:"finished,omitempty"`
	State     State                `protobuf:"varint,9,opt,name=state,proto3,enum=pb.State" json:"state,omitempty"`
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt *timestamp.Timestamp `protobuf:"bytes,12,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *Novel) Reset() {
	*x = Novel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novels_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Novel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Novel) ProtoMessage() {}

func (x *Novel) ProtoReflect() protoreflect.Message {
	mi := &file_novels_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Novel.ProtoReflect.Descriptor instead.
func (*Novel) Descriptor() ([]byte, []int) {
	return file_novels_proto_rawDescGZIP(), []int{0}
}

func (x *Novel) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Novel) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Novel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Novel) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Novel) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Novel) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Novel) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *Novel) GetFinished() bool {
	if x != nil {
		return x.Finished
	}
	return false
}

func (x *Novel) GetState() State {
	if x != nil {
		return x.State
	}
	return State_UNKONWN
}

func (x *Novel) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Novel) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Novel) GetDeletedAt() *timestamp.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

type PrimaryKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Pk:
	//	*PrimaryKey_Id
	//	*PrimaryKey_Uuid
	Pk isPrimaryKey_Pk `protobuf_oneof:"pk"`
}

func (x *PrimaryKey) Reset() {
	*x = PrimaryKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novels_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrimaryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryKey) ProtoMessage() {}

func (x *PrimaryKey) ProtoReflect() protoreflect.Message {
	mi := &file_novels_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryKey.ProtoReflect.Descriptor instead.
func (*PrimaryKey) Descriptor() ([]byte, []int) {
	return file_novels_proto_rawDescGZIP(), []int{1}
}

func (m *PrimaryKey) GetPk() isPrimaryKey_Pk {
	if m != nil {
		return m.Pk
	}
	return nil
}

func (x *PrimaryKey) GetId() uint64 {
	if x, ok := x.GetPk().(*PrimaryKey_Id); ok {
		return x.Id
	}
	return 0
}

func (x *PrimaryKey) GetUuid() string {
	if x, ok := x.GetPk().(*PrimaryKey_Uuid); ok {
		return x.Uuid
	}
	return ""
}

type isPrimaryKey_Pk interface {
	isPrimaryKey_Pk()
}

type PrimaryKey_Id struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

type PrimaryKey_Uuid struct {
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3,oneof"`
}

func (*PrimaryKey_Id) isPrimaryKey_Pk() {}

func (*PrimaryKey_Uuid) isPrimaryKey_Pk() {}

type BrowseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     uint64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Paginate uint64 `protobuf:"varint,2,opt,name=paginate,proto3" json:"paginate,omitempty"`
}

func (x *BrowseRequest) Reset() {
	*x = BrowseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novels_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowseRequest) ProtoMessage() {}

func (x *BrowseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novels_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowseRequest.ProtoReflect.Descriptor instead.
func (*BrowseRequest) Descriptor() ([]byte, []int) {
	return file_novels_proto_rawDescGZIP(), []int{2}
}

func (x *BrowseRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *BrowseRequest) GetPaginate() uint64 {
	if x != nil {
		return x.Paginate
	}
	return 0
}

type BrowseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Novel `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BrowseReply) Reset() {
	*x = BrowseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novels_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowseReply) ProtoMessage() {}

func (x *BrowseReply) ProtoReflect() protoreflect.Message {
	mi := &file_novels_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowseReply.ProtoReflect.Descriptor instead.
func (*BrowseReply) Descriptor() ([]byte, []int) {
	return file_novels_proto_rawDescGZIP(), []int{3}
}

func (x *BrowseReply) GetData() []*Novel {
	if x != nil {
		return x.Data
	}
	return nil
}

type ReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pk        *PrimaryKey         `protobuf:"bytes,1,opt,name=pk,proto3" json:"pk,omitempty"`
	Condition map[string]*any.Any `protobuf:"bytes,2,rep,name=condition,proto3" json:"condition,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ReadRequest) Reset() {
	*x = ReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novels_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRequest) ProtoMessage() {}

func (x *ReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novels_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRequest.ProtoReflect.Descriptor instead.
func (*ReadRequest) Descriptor() ([]byte, []int) {
	return file_novels_proto_rawDescGZIP(), []int{4}
}

func (x *ReadRequest) GetPk() *PrimaryKey {
	if x != nil {
		return x.Pk
	}
	return nil
}

func (x *ReadRequest) GetCondition() map[string]*any.Any {
	if x != nil {
		return x.Condition
	}
	return nil
}

type ReadReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Novel `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ReadReply) Reset() {
	*x = ReadReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novels_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadReply) ProtoMessage() {}

func (x *ReadReply) ProtoReflect() protoreflect.Message {
	mi := &file_novels_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadReply.ProtoReflect.Descriptor instead.
func (*ReadReply) Descriptor() ([]byte, []int) {
	return file_novels_proto_rawDescGZIP(), []int{5}
}

func (x *ReadReply) GetData() *Novel {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Novel `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AddRequest) Reset() {
	*x = AddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novels_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRequest) ProtoMessage() {}

func (x *AddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novels_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRequest.ProtoReflect.Descriptor instead.
func (*AddRequest) Descriptor() ([]byte, []int) {
	return file_novels_proto_rawDescGZIP(), []int{6}
}

func (x *AddRequest) GetData() *Novel {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Novel `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AddReply) Reset() {
	*x = AddReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novels_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReply) ProtoMessage() {}

func (x *AddReply) ProtoReflect() protoreflect.Message {
	mi := &file_novels_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReply.ProtoReflect.Descriptor instead.
func (*AddReply) Descriptor() ([]byte, []int) {
	return file_novels_proto_rawDescGZIP(), []int{7}
}

func (x *AddReply) GetData() *Novel {
	if x != nil {
		return x.Data
	}
	return nil
}

type EditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pk   *PrimaryKey `protobuf:"bytes,1,opt,name=pk,proto3" json:"pk,omitempty"`
	Data *Novel      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *EditRequest) Reset() {
	*x = EditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novels_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditRequest) ProtoMessage() {}

func (x *EditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novels_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditRequest.ProtoReflect.Descriptor instead.
func (*EditRequest) Descriptor() ([]byte, []int) {
	return file_novels_proto_rawDescGZIP(), []int{8}
}

func (x *EditRequest) GetPk() *PrimaryKey {
	if x != nil {
		return x.Pk
	}
	return nil
}

func (x *EditRequest) GetData() *Novel {
	if x != nil {
		return x.Data
	}
	return nil
}

type EditReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Novel `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *EditReply) Reset() {
	*x = EditReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novels_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditReply) ProtoMessage() {}

func (x *EditReply) ProtoReflect() protoreflect.Message {
	mi := &file_novels_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditReply.ProtoReflect.Descriptor instead.
func (*EditReply) Descriptor() ([]byte, []int) {
	return file_novels_proto_rawDescGZIP(), []int{9}
}

func (x *EditReply) GetData() *Novel {
	if x != nil {
		return x.Data
	}
	return nil
}

type TrashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pk *PrimaryKey `protobuf:"bytes,1,opt,name=pk,proto3" json:"pk,omitempty"`
}

func (x *TrashRequest) Reset() {
	*x = TrashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novels_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrashRequest) ProtoMessage() {}

func (x *TrashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novels_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrashRequest.ProtoReflect.Descriptor instead.
func (*TrashRequest) Descriptor() ([]byte, []int) {
	return file_novels_proto_rawDescGZIP(), []int{10}
}

func (x *TrashRequest) GetPk() *PrimaryKey {
	if x != nil {
		return x.Pk
	}
	return nil
}

type TrashReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TrashReply) Reset() {
	*x = TrashReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novels_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrashReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrashReply) ProtoMessage() {}

func (x *TrashReply) ProtoReflect() protoreflect.Message {
	mi := &file_novels_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrashReply.ProtoReflect.Descriptor instead.
func (*TrashReply) Descriptor() ([]byte, []int) {
	return file_novels_proto_rawDescGZIP(), []int{11}
}

type RestoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pk *PrimaryKey `protobuf:"bytes,1,opt,name=pk,proto3" json:"pk,omitempty"`
}

func (x *RestoreRequest) Reset() {
	*x = RestoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novels_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreRequest) ProtoMessage() {}

func (x *RestoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novels_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreRequest.ProtoReflect.Descriptor instead.
func (*RestoreRequest) Descriptor() ([]byte, []int) {
	return file_novels_proto_rawDescGZIP(), []int{12}
}

func (x *RestoreRequest) GetPk() *PrimaryKey {
	if x != nil {
		return x.Pk
	}
	return nil
}

type RestoreReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Novel *Novel `protobuf:"bytes,1,opt,name=novel,proto3" json:"novel,omitempty"`
}

func (x *RestoreReply) Reset() {
	*x = RestoreReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novels_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreReply) ProtoMessage() {}

func (x *RestoreReply) ProtoReflect() protoreflect.Message {
	mi := &file_novels_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreReply.ProtoReflect.Descriptor instead.
func (*RestoreReply) Descriptor() ([]byte, []int) {
	return file_novels_proto_rawDescGZIP(), []int{13}
}

func (x *RestoreReply) GetNovel() *Novel {
	if x != nil {
		return x.Novel
	}
	return nil
}

type DestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pk *PrimaryKey `protobuf:"bytes,1,opt,name=pk,proto3" json:"pk,omitempty"`
}

func (x *DestroyRequest) Reset() {
	*x = DestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novels_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyRequest) ProtoMessage() {}

func (x *DestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novels_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyRequest.ProtoReflect.Descriptor instead.
func (*DestroyRequest) Descriptor() ([]byte, []int) {
	return file_novels_proto_rawDescGZIP(), []int{14}
}

func (x *DestroyRequest) GetPk() *PrimaryKey {
	if x != nil {
		return x.Pk
	}
	return nil
}

type DestroyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DestroyReply) Reset() {
	*x = DestroyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novels_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyReply) ProtoMessage() {}

func (x *DestroyReply) ProtoReflect() protoreflect.Message {
	mi := &file_novels_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyReply.ProtoReflect.Descriptor instead.
func (*DestroyReply) Descriptor() ([]byte, []int) {
	return file_novels_proto_rawDescGZIP(), []int{15}
}

type BatchAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Novel `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BatchAddRequest) Reset() {
	*x = BatchAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novels_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAddRequest) ProtoMessage() {}

func (x *BatchAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novels_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAddRequest.ProtoReflect.Descriptor instead.
func (*BatchAddRequest) Descriptor() ([]byte, []int) {
	return file_novels_proto_rawDescGZIP(), []int{16}
}

func (x *BatchAddRequest) GetData() []*Novel {
	if x != nil {
		return x.Data
	}
	return nil
}

type BatchAddReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Novel `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BatchAddReply) Reset() {
	*x = BatchAddReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novels_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchAddReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAddReply) ProtoMessage() {}

func (x *BatchAddReply) ProtoReflect() protoreflect.Message {
	mi := &file_novels_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAddReply.ProtoReflect.Descriptor instead.
func (*BatchAddReply) Descriptor() ([]byte, []int) {
	return file_novels_proto_rawDescGZIP(), []int{17}
}

func (x *BatchAddReply) GetData() []*Novel {
	if x != nil {
		return x.Data
	}
	return nil
}

type BatchEditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Novel `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BatchEditRequest) Reset() {
	*x = BatchEditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novels_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchEditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchEditRequest) ProtoMessage() {}

func (x *BatchEditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novels_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchEditRequest.ProtoReflect.Descriptor instead.
func (*BatchEditRequest) Descriptor() ([]byte, []int) {
	return file_novels_proto_rawDescGZIP(), []int{18}
}

func (x *BatchEditRequest) GetData() []*Novel {
	if x != nil {
		return x.Data
	}
	return nil
}

type BatchEditReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Novel `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BatchEditReply) Reset() {
	*x = BatchEditReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novels_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchEditReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchEditReply) ProtoMessage() {}

func (x *BatchEditReply) ProtoReflect() protoreflect.Message {
	mi := &file_novels_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchEditReply.ProtoReflect.Descriptor instead.
func (*BatchEditReply) Descriptor() ([]byte, []int) {
	return file_novels_proto_rawDescGZIP(), []int{19}
}

func (x *BatchEditReply) GetData() []*Novel {
	if x != nil {
		return x.Data
	}
	return nil
}

type BatchTrashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pks []*PrimaryKey `protobuf:"bytes,1,rep,name=pks,proto3" json:"pks,omitempty"`
}

func (x *BatchTrashRequest) Reset() {
	*x = BatchTrashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novels_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchTrashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchTrashRequest) ProtoMessage() {}

func (x *BatchTrashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novels_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchTrashRequest.ProtoReflect.Descriptor instead.
func (*BatchTrashRequest) Descriptor() ([]byte, []int) {
	return file_novels_proto_rawDescGZIP(), []int{20}
}

func (x *BatchTrashRequest) GetPks() []*PrimaryKey {
	if x != nil {
		return x.Pks
	}
	return nil
}

type BatchTrashReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BatchTrashReply) Reset() {
	*x = BatchTrashReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novels_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchTrashReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchTrashReply) ProtoMessage() {}

func (x *BatchTrashReply) ProtoReflect() protoreflect.Message {
	mi := &file_novels_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchTrashReply.ProtoReflect.Descriptor instead.
func (*BatchTrashReply) Descriptor() ([]byte, []int) {
	return file_novels_proto_rawDescGZIP(), []int{21}
}

type BatchRestoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pks []*PrimaryKey `protobuf:"bytes,1,rep,name=pks,proto3" json:"pks,omitempty"`
}

func (x *BatchRestoreRequest) Reset() {
	*x = BatchRestoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novels_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchRestoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRestoreRequest) ProtoMessage() {}

func (x *BatchRestoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novels_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRestoreRequest.ProtoReflect.Descriptor instead.
func (*BatchRestoreRequest) Descriptor() ([]byte, []int) {
	return file_novels_proto_rawDescGZIP(), []int{22}
}

func (x *BatchRestoreRequest) GetPks() []*PrimaryKey {
	if x != nil {
		return x.Pks
	}
	return nil
}

type BatchRestoreReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Novel `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BatchRestoreReply) Reset() {
	*x = BatchRestoreReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novels_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchRestoreReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRestoreReply) ProtoMessage() {}

func (x *BatchRestoreReply) ProtoReflect() protoreflect.Message {
	mi := &file_novels_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRestoreReply.ProtoReflect.Descriptor instead.
func (*BatchRestoreReply) Descriptor() ([]byte, []int) {
	return file_novels_proto_rawDescGZIP(), []int{23}
}

func (x *BatchRestoreReply) GetData() []*Novel {
	if x != nil {
		return x.Data
	}
	return nil
}

type BatchDestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pks []*PrimaryKey `protobuf:"bytes,1,rep,name=pks,proto3" json:"pks,omitempty"`
}

func (x *BatchDestroyRequest) Reset() {
	*x = BatchDestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novels_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDestroyRequest) ProtoMessage() {}

func (x *BatchDestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_novels_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDestroyRequest.ProtoReflect.Descriptor instead.
func (*BatchDestroyRequest) Descriptor() ([]byte, []int) {
	return file_novels_proto_rawDescGZIP(), []int{24}
}

func (x *BatchDestroyRequest) GetPks() []*PrimaryKey {
	if x != nil {
		return x.Pks
	}
	return nil
}

type BatchDestroyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BatchDestroyReply) Reset() {
	*x = BatchDestroyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_novels_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDestroyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDestroyReply) ProtoMessage() {}

func (x *BatchDestroyReply) ProtoReflect() protoreflect.Message {
	mi := &file_novels_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDestroyReply.ProtoReflect.Descriptor instead.
func (*BatchDestroyReply) Descriptor() ([]byte, []int) {
	return file_novels_proto_rawDescGZIP(), []int{25}
}

var File_novels_proto protoreflect.FileDescriptor

var file_novels_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x70, 0x62, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x91, 0x03, 0x0a, 0x05, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x06,
	0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x3a, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x42, 0x04, 0x0a, 0x02,
	0x70, 0x6b, 0x22, 0x3f, 0x0a, 0x0d, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x22, 0x2c, 0x0a, 0x0b, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xbf, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x02, 0x70, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x02, 0x70,
	0x6b, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x52, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x2a, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x1d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x2b, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62,
	0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x29, 0x0a, 0x08,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x76, 0x65,
	0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4c, 0x0a, 0x0b, 0x45, 0x64, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x02, 0x70, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b,
	0x65, 0x79, 0x52, 0x02, 0x70, 0x6b, 0x12, 0x1d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2a, 0x0a, 0x09, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x2e, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x02, 0x70, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x02, 0x70,
	0x6b, 0x22, 0x0c, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x30, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x02, 0x70, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x02, 0x70,
	0x6b, 0x22, 0x2f, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x1f, 0x0a, 0x05, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6e, 0x6f, 0x76,
	0x65, 0x6c, 0x22, 0x30, 0x0a, 0x0e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x02, 0x70, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79,
	0x52, 0x02, 0x70, 0x6b, 0x22, 0x0e, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x30, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2e, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x31, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45,
	0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f,
	0x76, 0x65, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2f, 0x0a, 0x0e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x35, 0x0a, 0x11, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x03, 0x70, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x70, 0x6b,
	0x73, 0x22, 0x11, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x37, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x03, 0x70,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x70, 0x6b, 0x73, 0x22, 0x32, 0x0a,
	0x11, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x37, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x03, 0x70, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x70, 0x6b, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2a,
	0x58, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4f,
	0x4e, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x05, 0x32, 0xdd, 0x04, 0x0a, 0x06, 0x4e, 0x6f,
	0x76, 0x65, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x12, 0x11,
	0x2e, 0x70, 0x62, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x26, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x03, 0x41, 0x64,
	0x64, 0x12, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x26, 0x0a, 0x04, 0x45, 0x64, 0x69, 0x74, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x64, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x64,
	0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x73, 0x68,
	0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x73, 0x68, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x12,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x32, 0x0a, 0x08, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64,
	0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x45, 0x64, 0x69, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x62,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x38, 0x0a, 0x0a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x73, 0x68, 0x12, 0x15, 0x2e,
	0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x72, 0x61, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x3b, 0x6e,
	0x6f, 0x76, 0x65, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_novels_proto_rawDescOnce sync.Once
	file_novels_proto_rawDescData = file_novels_proto_rawDesc
)

func file_novels_proto_rawDescGZIP() []byte {
	file_novels_proto_rawDescOnce.Do(func() {
		file_novels_proto_rawDescData = protoimpl.X.CompressGZIP(file_novels_proto_rawDescData)
	})
	return file_novels_proto_rawDescData
}

var file_novels_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_novels_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_novels_proto_goTypes = []interface{}{
	(State)(0),                  // 0: pb.State
	(*Novel)(nil),               // 1: pb.Novel
	(*PrimaryKey)(nil),          // 2: pb.PrimaryKey
	(*BrowseRequest)(nil),       // 3: pb.BrowseRequest
	(*BrowseReply)(nil),         // 4: pb.BrowseReply
	(*ReadRequest)(nil),         // 5: pb.ReadRequest
	(*ReadReply)(nil),           // 6: pb.ReadReply
	(*AddRequest)(nil),          // 7: pb.AddRequest
	(*AddReply)(nil),            // 8: pb.AddReply
	(*EditRequest)(nil),         // 9: pb.EditRequest
	(*EditReply)(nil),           // 10: pb.EditReply
	(*TrashRequest)(nil),        // 11: pb.TrashRequest
	(*TrashReply)(nil),          // 12: pb.TrashReply
	(*RestoreRequest)(nil),      // 13: pb.RestoreRequest
	(*RestoreReply)(nil),        // 14: pb.RestoreReply
	(*DestroyRequest)(nil),      // 15: pb.DestroyRequest
	(*DestroyReply)(nil),        // 16: pb.DestroyReply
	(*BatchAddRequest)(nil),     // 17: pb.BatchAddRequest
	(*BatchAddReply)(nil),       // 18: pb.BatchAddReply
	(*BatchEditRequest)(nil),    // 19: pb.BatchEditRequest
	(*BatchEditReply)(nil),      // 20: pb.BatchEditReply
	(*BatchTrashRequest)(nil),   // 21: pb.BatchTrashRequest
	(*BatchTrashReply)(nil),     // 22: pb.BatchTrashReply
	(*BatchRestoreRequest)(nil), // 23: pb.BatchRestoreRequest
	(*BatchRestoreReply)(nil),   // 24: pb.BatchRestoreReply
	(*BatchDestroyRequest)(nil), // 25: pb.BatchDestroyRequest
	(*BatchDestroyReply)(nil),   // 26: pb.BatchDestroyReply
	nil,                         // 27: pb.ReadRequest.ConditionEntry
	(*timestamp.Timestamp)(nil), // 28: google.protobuf.Timestamp
	(*any.Any)(nil),             // 29: google.protobuf.Any
}
var file_novels_proto_depIdxs = []int32{
	0,  // 0: pb.Novel.state:type_name -> pb.State
	28, // 1: pb.Novel.created_at:type_name -> google.protobuf.Timestamp
	28, // 2: pb.Novel.updated_at:type_name -> google.protobuf.Timestamp
	28, // 3: pb.Novel.deleted_at:type_name -> google.protobuf.Timestamp
	1,  // 4: pb.BrowseReply.data:type_name -> pb.Novel
	2,  // 5: pb.ReadRequest.pk:type_name -> pb.PrimaryKey
	27, // 6: pb.ReadRequest.condition:type_name -> pb.ReadRequest.ConditionEntry
	1,  // 7: pb.ReadReply.data:type_name -> pb.Novel
	1,  // 8: pb.AddRequest.data:type_name -> pb.Novel
	1,  // 9: pb.AddReply.data:type_name -> pb.Novel
	2,  // 10: pb.EditRequest.pk:type_name -> pb.PrimaryKey
	1,  // 11: pb.EditRequest.data:type_name -> pb.Novel
	1,  // 12: pb.EditReply.data:type_name -> pb.Novel
	2,  // 13: pb.TrashRequest.pk:type_name -> pb.PrimaryKey
	2,  // 14: pb.RestoreRequest.pk:type_name -> pb.PrimaryKey
	1,  // 15: pb.RestoreReply.novel:type_name -> pb.Novel
	2,  // 16: pb.DestroyRequest.pk:type_name -> pb.PrimaryKey
	1,  // 17: pb.BatchAddRequest.data:type_name -> pb.Novel
	1,  // 18: pb.BatchAddReply.data:type_name -> pb.Novel
	1,  // 19: pb.BatchEditRequest.data:type_name -> pb.Novel
	1,  // 20: pb.BatchEditReply.data:type_name -> pb.Novel
	2,  // 21: pb.BatchTrashRequest.pks:type_name -> pb.PrimaryKey
	2,  // 22: pb.BatchRestoreRequest.pks:type_name -> pb.PrimaryKey
	1,  // 23: pb.BatchRestoreReply.data:type_name -> pb.Novel
	2,  // 24: pb.BatchDestroyRequest.pks:type_name -> pb.PrimaryKey
	29, // 25: pb.ReadRequest.ConditionEntry.value:type_name -> google.protobuf.Any
	3,  // 26: pb.Novels.Browse:input_type -> pb.BrowseRequest
	5,  // 27: pb.Novels.Read:input_type -> pb.ReadRequest
	7,  // 28: pb.Novels.Add:input_type -> pb.AddRequest
	9,  // 29: pb.Novels.Edit:input_type -> pb.EditRequest
	11, // 30: pb.Novels.Trash:input_type -> pb.TrashRequest
	13, // 31: pb.Novels.Restore:input_type -> pb.RestoreRequest
	15, // 32: pb.Novels.Destroy:input_type -> pb.DestroyRequest
	17, // 33: pb.Novels.BatchAdd:input_type -> pb.BatchAddRequest
	19, // 34: pb.Novels.BatchEdit:input_type -> pb.BatchEditRequest
	21, // 35: pb.Novels.BatchTrash:input_type -> pb.BatchTrashRequest
	23, // 36: pb.Novels.BatchRestore:input_type -> pb.BatchRestoreRequest
	25, // 37: pb.Novels.BatchDestroy:input_type -> pb.BatchDestroyRequest
	4,  // 38: pb.Novels.Browse:output_type -> pb.BrowseReply
	6,  // 39: pb.Novels.Read:output_type -> pb.ReadReply
	8,  // 40: pb.Novels.Add:output_type -> pb.AddReply
	10, // 41: pb.Novels.Edit:output_type -> pb.EditReply
	12, // 42: pb.Novels.Trash:output_type -> pb.TrashReply
	14, // 43: pb.Novels.Restore:output_type -> pb.RestoreReply
	16, // 44: pb.Novels.Destroy:output_type -> pb.DestroyReply
	18, // 45: pb.Novels.BatchAdd:output_type -> pb.BatchAddReply
	20, // 46: pb.Novels.BatchEdit:output_type -> pb.BatchEditReply
	22, // 47: pb.Novels.BatchTrash:output_type -> pb.BatchTrashReply
	24, // 48: pb.Novels.BatchRestore:output_type -> pb.BatchRestoreReply
	26, // 49: pb.Novels.BatchDestroy:output_type -> pb.BatchDestroyReply
	38, // [38:50] is the sub-list for method output_type
	26, // [26:38] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_novels_proto_init() }
func file_novels_proto_init() {
	if File_novels_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_novels_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Novel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novels_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrimaryKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novels_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novels_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novels_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novels_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novels_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novels_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novels_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novels_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novels_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novels_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrashReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novels_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novels_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novels_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novels_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novels_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novels_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchAddReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novels_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchEditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novels_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchEditReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novels_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchTrashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novels_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchTrashReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novels_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchRestoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novels_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchRestoreReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novels_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_novels_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDestroyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_novels_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*PrimaryKey_Id)(nil),
		(*PrimaryKey_Uuid)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_novels_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_novels_proto_goTypes,
		DependencyIndexes: file_novels_proto_depIdxs,
		EnumInfos:         file_novels_proto_enumTypes,
		MessageInfos:      file_novels_proto_msgTypes,
	}.Build()
	File_novels_proto = out.File
	file_novels_proto_rawDesc = nil
	file_novels_proto_goTypes = nil
	file_novels_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NovelsClient is the client API for Novels service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NovelsClient interface {
	Browse(ctx context.Context, in *BrowseRequest, opts ...grpc.CallOption) (*BrowseReply, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadReply, error)
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error)
	Edit(ctx context.Context, in *EditRequest, opts ...grpc.CallOption) (*EditReply, error)
	Trash(ctx context.Context, in *TrashRequest, opts ...grpc.CallOption) (*TrashReply, error)
	Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*RestoreReply, error)
	Destroy(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*DestroyReply, error)
	BatchAdd(ctx context.Context, in *BatchAddRequest, opts ...grpc.CallOption) (*BatchAddReply, error)
	BatchEdit(ctx context.Context, in *BatchEditRequest, opts ...grpc.CallOption) (*BatchEditReply, error)
	BatchTrash(ctx context.Context, in *BatchTrashRequest, opts ...grpc.CallOption) (*BatchTrashReply, error)
	BatchRestore(ctx context.Context, in *BatchRestoreRequest, opts ...grpc.CallOption) (*BatchRestoreReply, error)
	BatchDestroy(ctx context.Context, in *BatchDestroyRequest, opts ...grpc.CallOption) (*BatchDestroyReply, error)
}

type novelsClient struct {
	cc grpc.ClientConnInterface
}

func NewNovelsClient(cc grpc.ClientConnInterface) NovelsClient {
	return &novelsClient{cc}
}

func (c *novelsClient) Browse(ctx context.Context, in *BrowseRequest, opts ...grpc.CallOption) (*BrowseReply, error) {
	out := new(BrowseReply)
	err := c.cc.Invoke(ctx, "/pb.Novels/Browse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelsClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadReply, error) {
	out := new(ReadReply)
	err := c.cc.Invoke(ctx, "/pb.Novels/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelsClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error) {
	out := new(AddReply)
	err := c.cc.Invoke(ctx, "/pb.Novels/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelsClient) Edit(ctx context.Context, in *EditRequest, opts ...grpc.CallOption) (*EditReply, error) {
	out := new(EditReply)
	err := c.cc.Invoke(ctx, "/pb.Novels/Edit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelsClient) Trash(ctx context.Context, in *TrashRequest, opts ...grpc.CallOption) (*TrashReply, error) {
	out := new(TrashReply)
	err := c.cc.Invoke(ctx, "/pb.Novels/Trash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelsClient) Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*RestoreReply, error) {
	out := new(RestoreReply)
	err := c.cc.Invoke(ctx, "/pb.Novels/Restore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelsClient) Destroy(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*DestroyReply, error) {
	out := new(DestroyReply)
	err := c.cc.Invoke(ctx, "/pb.Novels/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelsClient) BatchAdd(ctx context.Context, in *BatchAddRequest, opts ...grpc.CallOption) (*BatchAddReply, error) {
	out := new(BatchAddReply)
	err := c.cc.Invoke(ctx, "/pb.Novels/BatchAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelsClient) BatchEdit(ctx context.Context, in *BatchEditRequest, opts ...grpc.CallOption) (*BatchEditReply, error) {
	out := new(BatchEditReply)
	err := c.cc.Invoke(ctx, "/pb.Novels/BatchEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelsClient) BatchTrash(ctx context.Context, in *BatchTrashRequest, opts ...grpc.CallOption) (*BatchTrashReply, error) {
	out := new(BatchTrashReply)
	err := c.cc.Invoke(ctx, "/pb.Novels/BatchTrash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelsClient) BatchRestore(ctx context.Context, in *BatchRestoreRequest, opts ...grpc.CallOption) (*BatchRestoreReply, error) {
	out := new(BatchRestoreReply)
	err := c.cc.Invoke(ctx, "/pb.Novels/BatchRestore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelsClient) BatchDestroy(ctx context.Context, in *BatchDestroyRequest, opts ...grpc.CallOption) (*BatchDestroyReply, error) {
	out := new(BatchDestroyReply)
	err := c.cc.Invoke(ctx, "/pb.Novels/BatchDestroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NovelsServer is the server API for Novels service.
type NovelsServer interface {
	Browse(context.Context, *BrowseRequest) (*BrowseReply, error)
	Read(context.Context, *ReadRequest) (*ReadReply, error)
	Add(context.Context, *AddRequest) (*AddReply, error)
	Edit(context.Context, *EditRequest) (*EditReply, error)
	Trash(context.Context, *TrashRequest) (*TrashReply, error)
	Restore(context.Context, *RestoreRequest) (*RestoreReply, error)
	Destroy(context.Context, *DestroyRequest) (*DestroyReply, error)
	BatchAdd(context.Context, *BatchAddRequest) (*BatchAddReply, error)
	BatchEdit(context.Context, *BatchEditRequest) (*BatchEditReply, error)
	BatchTrash(context.Context, *BatchTrashRequest) (*BatchTrashReply, error)
	BatchRestore(context.Context, *BatchRestoreRequest) (*BatchRestoreReply, error)
	BatchDestroy(context.Context, *BatchDestroyRequest) (*BatchDestroyReply, error)
}

// UnimplementedNovelsServer can be embedded to have forward compatible implementations.
type UnimplementedNovelsServer struct {
}

func (*UnimplementedNovelsServer) Browse(context.Context, *BrowseRequest) (*BrowseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Browse not implemented")
}
func (*UnimplementedNovelsServer) Read(context.Context, *ReadRequest) (*ReadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedNovelsServer) Add(context.Context, *AddRequest) (*AddReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedNovelsServer) Edit(context.Context, *EditRequest) (*EditReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edit not implemented")
}
func (*UnimplementedNovelsServer) Trash(context.Context, *TrashRequest) (*TrashReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trash not implemented")
}
func (*UnimplementedNovelsServer) Restore(context.Context, *RestoreRequest) (*RestoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (*UnimplementedNovelsServer) Destroy(context.Context, *DestroyRequest) (*DestroyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (*UnimplementedNovelsServer) BatchAdd(context.Context, *BatchAddRequest) (*BatchAddReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAdd not implemented")
}
func (*UnimplementedNovelsServer) BatchEdit(context.Context, *BatchEditRequest) (*BatchEditReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchEdit not implemented")
}
func (*UnimplementedNovelsServer) BatchTrash(context.Context, *BatchTrashRequest) (*BatchTrashReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchTrash not implemented")
}
func (*UnimplementedNovelsServer) BatchRestore(context.Context, *BatchRestoreRequest) (*BatchRestoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchRestore not implemented")
}
func (*UnimplementedNovelsServer) BatchDestroy(context.Context, *BatchDestroyRequest) (*BatchDestroyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDestroy not implemented")
}

func RegisterNovelsServer(s *grpc.Server, srv NovelsServer) {
	s.RegisterService(&_Novels_serviceDesc, srv)
}

func _Novels_Browse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelsServer).Browse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Novels/Browse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelsServer).Browse(ctx, req.(*BrowseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Novels_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelsServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Novels/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelsServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Novels_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelsServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Novels/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelsServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Novels_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelsServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Novels/Edit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelsServer).Edit(ctx, req.(*EditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Novels_Trash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelsServer).Trash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Novels/Trash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelsServer).Trash(ctx, req.(*TrashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Novels_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelsServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Novels/Restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelsServer).Restore(ctx, req.(*RestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Novels_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelsServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Novels/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelsServer).Destroy(ctx, req.(*DestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Novels_BatchAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelsServer).BatchAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Novels/BatchAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelsServer).BatchAdd(ctx, req.(*BatchAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Novels_BatchEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelsServer).BatchEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Novels/BatchEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelsServer).BatchEdit(ctx, req.(*BatchEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Novels_BatchTrash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchTrashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelsServer).BatchTrash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Novels/BatchTrash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelsServer).BatchTrash(ctx, req.(*BatchTrashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Novels_BatchRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelsServer).BatchRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Novels/BatchRestore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelsServer).BatchRestore(ctx, req.(*BatchRestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Novels_BatchDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelsServer).BatchDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Novels/BatchDestroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelsServer).BatchDestroy(ctx, req.(*BatchDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Novels_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Novels",
	HandlerType: (*NovelsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Browse",
			Handler:    _Novels_Browse_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Novels_Read_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Novels_Add_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _Novels_Edit_Handler,
		},
		{
			MethodName: "Trash",
			Handler:    _Novels_Trash_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _Novels_Restore_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _Novels_Destroy_Handler,
		},
		{
			MethodName: "BatchAdd",
			Handler:    _Novels_BatchAdd_Handler,
		},
		{
			MethodName: "BatchEdit",
			Handler:    _Novels_BatchEdit_Handler,
		},
		{
			MethodName: "BatchTrash",
			Handler:    _Novels_BatchTrash_Handler,
		},
		{
			MethodName: "BatchRestore",
			Handler:    _Novels_BatchRestore_Handler,
		},
		{
			MethodName: "BatchDestroy",
			Handler:    _Novels_BatchDestroy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "novels.proto",
}
